# x = '123224212141133433'


""" 
This file is just used to test code.
"""

# x = '123222121113333'
# level_order = ''
# skill_count = (x.count('1'), x.count('2'), x.count('3'))
# skills = {
#    'q': skill_count[0],
#    'w': skill_count[1],
#    'e': skill_count[2]
# }

# for i, g in enumerate(skill_count):
#    for u, y in enumerate(skill_count):
#       if i == u: continue
#       if g == y: print(g, y, 'these two match')

# y = sorted(x, key=lambda a: x.count(a))
# print(''.join(y))

x = [
   '123212222222111133333'
   # '3122',
   # '232242',
   # '123114121',
   # '123224212',
   # '12311412124',
   # '12321422114',
   # '12322421214',
   # '13211422114',
   # '23111412124',
   # '31212422214',
   # '123114121242',
   # '123114121243',
   # '123114131343',
   # '123124222141',
   # '123214211142',
   # '123214212241',
   # '123224122141',
   # '123224212141',
   # '132224212141',
   # '213224212141',
   # '231114211242',
   # '321124222141',
   # '1231141212422',
   # '1231242112412',
   # '1232142221411',
   # '1232242121411',
   # '1232242123431',
   # '1322242121411',
   # '3212241111422',
   # '11321412134322',
   # '12131412124223',
   # '12311412124223',
   # '12311412224123',
   # '12311412224233',
   # '12311422224113',
   # '12312412224113',
   # '12312422214113',
   # '12312422241113',
   # '12321411124223',
   # '12321422214113',
   # '12322412124113',
   # '12322421214113',
   # '13211412124223',
   # '13222421124113',
   # '13222421214113',
   # '21131412124223',
   # '23111412124223',
   # '31311412124222',
   # '32122421214113',
   # '122324212141133',
   # '123114121242233',
   # '123114121242234',
   # '123114121242323',
   # '123114121422233',
   # '123114122142233',
   # '123114222241133',
   # '123124122241133',
   # '123214111242233',
   # '123214122141233',
   # '123223422141113',
   # '123224111142233',
   # '123224211241133',
   # '123224212141133',
   # '123224232141113',
   # '132114121242233',
   # '132224211241313',
   # '132224212141133',
   # '213224212141133',
   # '231114121242233',
   # '321114121242233',
   # '321224212141133',
   # '1231141212422333',
   # '1231141212422334',
   # '1231141212432234',
   # '1231141221422334',
   # '1231141222412334',
   # '1231141222421334',
   # '1231141312422234',
   # '1231142112422334',
   # '1231142222411334',
   # '1231241222411334',
   # '1232141112422334',
   # '1232142122411334',
   # '1232142211142334',
   # '1232241111422334',
   # '1232241122411334',
   # '1232241221411334',
   # '1232242111412334',
   # '1232242112411334',
   # '1232242121141334',
   # '1232242121411333',
   # '1232242121411334',
   # '1321141212422334',
   # '1322242121411334',
   # '2131141212423234',
   # '2131242221411334',
   # '2132242121411334',
   # '3121141212422334',
   # '3122242121411334',
   # '3212242121411334',
   # '12311412124223343',
   # '12311412224123343',
   # '12311413124222343',
   # '12311413134332242',
   # '12311422114223343',
   # '12311422224113343',
   # '12312411124223343',
   # '12312421114223343',
   # '12321421114223343',
   # '12321422214113343',
   # '12322412214113343',
   # '12322421211413343',
   # '12322421214113343',
   # '12322421234111343',
   # '13211412124223343',
   # '13222421214113343',
   # '21322421214113343',
   # '21322422114131433',
   # '31211413134332242',
   # '32122421214113343',
   # '113214131343322422',
   # '122324212141133433',
   # '123114121224233433',
   # '123114121242233433',
   # '123114121242323433',
   # '123114121342223433',
   # '123114122142233433',
   # '123114122242133433',
   # '123114131343322422',
   # '123114222241133343',
   # '123114222241133433',
   # '123124111242233433',
   # '123124111243223433',
   # '123124112142233433',
   # '123124221241133433',
   # '123124222141133433',
   # '123124222143311433',
   # '123214111242233433',
   # '123214112142233433',
   # '123214122142133433',
   # '123214222141133433',
   # '123224111142233433',
   # '123224111241233433',
   # '123224121241133433',
   # '123224122141133433',
   # '123224211141233433',
   # '123224211241133433',
   # '123224212141133343',
   # '123224212141133433',
   # '123224212341113433',
   # '123224232141113433',
   # '131214121242233433',
   # '132114121242233433',
   # '132224212141133433',
   # '213114121242233433',
   # '213224111142233433',
   # '213224212141133433',
   # '213224212141313433',
   # '231114121242233433',
   # '231224212141133433',
   # '231224213142113433',
   # '312114121242233433',
   # '312214111242233433',
   # '321114121242233433',
   # '321224212141133433'
]

for ye in x:
   ye = ye.replace('4', '')
   level_order = ''

   ql, wl, el = 0, 0, 0
   for v in ye:
      if v == '1': ql +=1
      if v == '2': wl +=1
      if v == '3': el +=1
   
   skills = {
      '1': ql,
      '2': wl,
      '3': el
   }

   table = {
      '1': 'q',
      '2': 'w',
      '3': 'e'
   }

   count = [
      [], [], [], [], [], []
   ]

   for s in skills:
      if skills[s] > 5: skills[s] = 5 # Khazix can levels W 9 times?
      if skills[s] == 0: count[6].append(s)
      if skills[s] == 1: count[5].append(s)
      if skills[s] == 2: count[4].append(s)
      if skills[s] == 3: count[3].append(s)
      if skills[s] == 4: count[2].append(s)
      if skills[s] == 5: count[1].append(s)
   """ 
   Cause I'm gonna forget by tomorrow.
   1. iterate through count list, which stores values by frequency in spell string where most occuring (5 levels) is the zeroth list and the least occuring (0 levels) is the fifth list.

   2. If there are multiple spells with same frequency (level 18 champ has all 3 spells leveled 5 times), then iter through that and find the spell that has the earliest last occurence and append, by earliest last occurence first, to the level_order string.

   3. If there is only one spell in a count sub-list, add to string. 
   """
   for i, arr in enumerate(count):
      if len(arr) > 1:
         if i == 5:
            for v in arr: level_order += table[v]
            continue
         o = {v: len(ye) - 1 - ye[::-1].index(v) for v in arr}
         s = sorted(o, key=lambda x: o[x])
         for u in s: level_order += table[u]
      elif len(arr) == 1:
         level_order += table[arr[0]]
   # print(count)
   print(level_order)
   # _singles = [x for x in skills if skills[x] == 1]
   # _zeros = [table[x] for x in skills if skills[x] == 0]

   # qwe = [0, 0, 0]
   # singles = ''
   # zeros = ''.join(_zeros)
   # for i in ye:
   #    qwe[int(i) - 1] += 1
   #    if i in _singles:
   #       singles += table[i]
   #       continue
      
   #    if qwe[int(i) - 1] == skills[i] and table[i] not in level_order: level_order += table[i]
   
   
   # print(level_order + singles + zeros)