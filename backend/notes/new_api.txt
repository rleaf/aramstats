NEW API (9/24/24)

PROBLEMS:
   [1]: There are sprinkles of inefficiencies.
      [1]: Inefficient usage of Riot calls (summoner checks).
      [2]: Comms between front & back is overly complicated.
   [2]: Ugly to look at.
      [1]: After continuous interative updates, the code has Frankenstein'd into a spaghetti monster.
      [2]: [1][2].

STEPS FOR RESOLUTION:
   [1]: This would be my third rewrite of the API. The most recent one was supposed to be an improvement on the first, but that was really only a structural change (which tbf did help a lot). So to do this properly, wireframe it (this) before coding.
   [2]: Build it bottom up (NAND -> ALU). Going top down ie (ALU -> NAND) will bias me to making shit modular components.
      [1]: Hm. Top down is still nice because it gives direction.
   [3]: It is okay to create more endpoints. Some of them may be overly complex.
   
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Return states:
   [1]: Summoner is in DB, here it is.
   [2]: Summoner is in queue, here is the queue position.
   [3]: Summoner DNE, needs to be parsed.
   [4]: Uh oh, something went wrong and requires a reparse

BOT -> UP

Twisted interface:
   retryWrapper (do i need?)
   batchTimeline
   batchMatches
   getChallenges
   getPUUID
   getSummonerFromRiot
   getMatchHistory



TOP -> DOWN

Endpoints:
   Get summoner
      checkIfSummInDB
         RETURN [1] if parse COMPELTE
         RETURN [2] if parse IN QUEUE
         RETURN [3] if DNE
         RETURN [3] if anything bad happens
   Parse summoner
      getPUUID
      addSummToQueue
      workQueue
   Update summoner
   *Delete summoner

workQueue
   while...
      getPUUIDInQueue
      parseSummoner
checkIfSummInDB
   getPUUID
   findOneInDB

getPUUID

getPUUIDInQueue

parseSummoner
   skeletonizeSummoner
   getMatchHistory
   batchMatches
   batchTimeline
   getChallenges

checkIfSummInQueue
   getSummonerFromRiot
   getSummonerFromDB
updateSummoner
deleteSummoner (utility)