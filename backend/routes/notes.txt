+ Pro
- Con
* Current Idea

Database
   Want to store match data for every game parsed from a summoner. A response from the match-v5 endpoint is 60.25KB.
      + Future proof & robust. Can (probably) easily implement new stats since I'm storing all data and won't have to worry about "if I have it".
      + Don't need to make requests to Riot API to get match data.
      - Size. Only have 256GB. With currently 4437 summoners parsed, if each summoner had ~1000 games, that would be ~267GB.

      * Trim the fat, store particular info.


   Want to store all match data on current & prior patch. 



****************************************************************************************

"""
Using one-to-many referenced here: https://www.mongodb.com/blog/post/6-rules-of-thumb-for-mongodb-schema-design

This guy says having MANY MANY collections as opposed to having MANY MANY documents in a collection is a no-go:
https://www.mongodb.com/community/forums/t/any-case-where-collection-per-entity-is-a-good-model/105561/4?u=ryan_lin
"""

# Summoner Collection
{
   # Summoner document
   {
      metaData: {},
      championData: [
         {
            champion: "Azir",
            averageStats: {
               kills: Number,
               ...
            },
            matches: [
               ObjectID(AAAA),
               ObjectID(AAAB),
               ObjectID(AAA),
            ]
         },
         {
            averageStats: {
               kills: Number,
               ...
            },
            matches: [
               ObjectID(AAAA),
               ObjectID(AAAB),
               ObjectID(AAA),
            ]
         },
      ]
   }
}

# Summoner Collection
{
   # Summoner document
   {
      metaData: {},
      # Champion data
      {
         champion: "Azir",
         averages: {...},
         matches: [
            ObjectID(AAAA),
            ObjectID(AAAB),
            ObjectID(AAAC),
         ]
      }
   }
}

"""
Represent each summoner as a collection in the 'summoners' db.
Aliquot champion unique statistics/information into their own documents.
"""
# DB (Current)
{
   # Summoner 1 Collection
   {
      # Account Info
      {}
      # Champ X Data
      {}
      # Champ Y Data
      {}
      # Champ Z Data
      {}
      ...
   }
   # Summoner 2 Collection
   {
      # Account Info
      {}
      # Champ X Data
      {}
      # Champ Y Data
      {}
      # Champ Z Data
      {}
      ...
   }
}


"""
Represent each summoner as a document in the 'summoners' collection.
Aliquot champion unique statistics/information into their own nested objects.
"""
# DB
{
   # Summoner collection
   {
      # Summoner document
      {
         # Account Info
         {}
         # Champ X Data
         {}
         # Champ Y Data
         {}
         # Champ Z Data
         {}
      }
      # Summoner document
      {
         # Account Info
         {}
         # Champ X Data
         {}
         # Champ Y Data
         {}
         # Champ Z Data
         {}
      }
   }
} 


"""
Use first archetype, but name collections uniquely (ie: do not use summoner name as there is a faker in NA and a faker in EUW). Use something like PUUID or account Id. PUUID is unique globally.
"""
# DB (Current)
{
   # Summoner 1 Collection puuid
   {
      # Account Info
      {}
      # Champ X Data
      {}
      # Champ Y Data
      {}
      # Champ Z Data
      {}
      ...
   }
   # Summoner 2 Collection puuid
   {
      # Account Info
      {}
      # Champ X Data
      {}
      # Champ Y Data
      {}
      # Champ Z Data
      {}
      ...
   }
}

btw, it'd be pretty neat to see patch deltas for champ stats such as dps, dtps, dmps, etc to see overall flux. 

******


# Matches Collection
{
   # Match 1
   {
      "_id": "AAAA"
      # Match data
      ...
   }
   # Match 2
   {
      "_id": "AAAA"
      # Match data
      ...
   }
   # Store matchdata, enough for Match.vue
   ... 
}